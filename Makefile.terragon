# Terragon Autonomous SDLC Engine - Make Targets
# Add these targets to your existing Makefile for autonomous operations

.PHONY: terragon-discover terragon-execute terragon-schedule terragon-status terragon-install

## Terragon Autonomous SDLC Operations
terragon-discover: ## Discover and prioritize value opportunities
	@echo "🔍 Running autonomous value discovery..."
	python .terragon/autonomous-discovery.py
	@echo "📋 Check BACKLOG.md for prioritized items"

terragon-execute: ## Execute next highest-value item
	@echo "🚀 Executing next best value item..."
	python .terragon/value-executor.py
	@echo "✅ Execution completed - check results"

terragon-schedule-daily: ## Run daily analysis and execution cycle
	@echo "📊 Running daily autonomous cycle..."
	python .terragon/scheduler.py --mode single --cycle daily

terragon-schedule-security: ## Run security-focused scan
	@echo "🔒 Running security-focused scan..."
	python .terragon/scheduler.py --mode single --cycle security

terragon-schedule-weekly: ## Run comprehensive weekly review
	@echo "📈 Running weekly deep review..."
	python .terragon/scheduler.py --mode single --cycle weekly

terragon-schedule-continuous: ## Start continuous autonomous scheduler
	@echo "🤖 Starting continuous autonomous scheduler..."
	@echo "Press Ctrl+C to stop"
	python .terragon/scheduler.py --mode scheduler

terragon-status: ## Show current backlog and metrics
	@echo "📊 Terragon Autonomous SDLC Status"
	@echo "=================================="
	@echo ""
	@echo "📋 Current Backlog (Top 10):"
	@python -c "exec(open('.terragon/status-summary.py').read())" 2>/dev/null || echo "Run 'make terragon-discover' first"
	@echo ""
	@echo "📈 Value Metrics:"
	@python -c "import json; m=json.load(open('.terragon/value-metrics.json')); print(f\"Repository Maturity: {m.get('repositoryMetrics', {}).get('maturityScore', 0)}%\"); print(f\"Items in Backlog: {m.get('backlogMetrics', {}).get('totalItems', 0)}\"); print(f\"Total Value Delivered: ${m.get('valueDelivered', {}).get('totalHoursSaved', 0)*150:.0f} (estimated)\"); print(f\"Security Issues Resolved: {m.get('valueDelivered', {}).get('securityIssuesResolved', 0)}\"); print(f\"Technical Debt Reduced: {m.get('valueDelivered', {}).get('technicalDebtReduced', 0)} hours\")" 2>/dev/null || echo "Metrics not available"

terragon-install: ## Install Terragon autonomous system dependencies
	@echo "📦 Installing Terragon autonomous system dependencies..."
	pip install schedule pyyaml
	@echo "🔧 Creating status summary script..."
	@cat > .terragon/status-summary.py << 'EOF'
import json
try:
    with open('.terragon/value-metrics.json', 'r') as f:
        metrics = json.load(f)
    
    backlog_items = metrics.get('backlogMetrics', {}).get('totalItems', 0)
    if backlog_items > 0:
        print("📋 Backlog Status:")
        print(f"   Total Items: {backlog_items}")
        dist = metrics.get('backlogMetrics', {}).get('priorityDistribution', {})
        print(f"   Critical: {dist.get('critical', 0)}")
        print(f"   High: {dist.get('high', 0)}")
        print(f"   Medium: {dist.get('medium', 0)}")
        print(f"   Low: {dist.get('low', 0)}")
    else:
        print("📋 No items discovered yet - run 'make terragon-discover'")
    
    print("\n📈 System Health:")
    repo_metrics = metrics.get('repositoryMetrics', {})
    print(f"   Repository Maturity: {repo_metrics.get('maturityScore', 0)}%")
    print(f"   Test Coverage: {repo_metrics.get('testCoverage', 0)}%")
    print(f"   Security Score: {repo_metrics.get('securityScore', 0)}%")
    
    history = metrics.get('executionHistory', [])
    if history:
        print(f"\n🎯 Recent Executions: {len(history)}")
        for item in history[-3:]:
            status = "✅" if item.get('success') else "❌"
            print(f"   {status} {item.get('title', 'Unknown')[:50]}")
    
except FileNotFoundError:
    print("📋 Terragon system not initialized - run 'make terragon-discover' first")
except Exception as e:
    print(f"Error: {e}")
EOF
	@echo "✅ Terragon autonomous system installed successfully!"
	@echo ""
	@echo "🚀 Quick Start:"
	@echo "   make terragon-discover     # Discover improvement opportunities"
	@echo "   make terragon-execute      # Execute next best value item"
	@echo "   make terragon-status       # Check current status"
	@echo ""
	@echo "🤖 Continuous Operation:"
	@echo "   make terragon-schedule-daily        # Daily cycle"
	@echo "   make terragon-schedule-continuous   # Full autonomous mode"

terragon-clean: ## Clean up Terragon temporary files
	@echo "🧹 Cleaning up Terragon temporary files..."
	@rm -f .terragon/status-summary.py
	@rm -f *.json.tmp
	@echo "✅ Cleanup completed"

## Terragon Integration Targets
terragon-ci-setup: ## Setup CI/CD integration
	@echo "🔧 Setting up Terragon CI/CD integration..."
	@mkdir -p .github/workflows
	@cat > .github/workflows/terragon-autonomous.yml << 'EOF'
name: Terragon Autonomous SDLC

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      cycle_type:
        description: 'Cycle type to run'
        required: true
        default: 'daily'
        type: choice
        options:
        - daily
        - security
        - weekly

jobs:
  autonomous-improvement:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: $${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          make terragon-install
      
      - name: Run Terragon Autonomous Cycle
        run: |
          cycle="${{ github.event.inputs.cycle_type || 'daily' }}"
          make terragon-schedule-$$cycle
      
      - name: Show Results
        run: make terragon-status
EOF
	@echo "✅ CI/CD integration created at .github/workflows/terragon-autonomous.yml"
	@echo "🔑 Make sure to enable GitHub Actions and configure appropriate permissions"

terragon-docs: ## Generate Terragon documentation
	@echo "📚 Generating Terragon documentation..."
	@mkdir -p docs/terragon
	@cat > docs/terragon/autonomous-sdlc.md << 'EOF'
# Terragon Autonomous SDLC Implementation

This repository is enhanced with the Terragon Autonomous SDLC Engine for continuous value discovery and execution.

## System Status

- **Repository Maturity**: Advanced (80%)
- **Value Discovery**: Active
- **Autonomous Execution**: Enabled
- **Safety Controls**: Comprehensive

## Key Features

### 🔍 Continuous Discovery
- Static analysis integration (ruff, mypy, bandit)
- Git history mining for technical debt
- Security vulnerability scanning
- Performance bottleneck identification

### 🎯 Intelligent Prioritization  
- WSJF (Weighted Shortest Job First) scoring
- ICE (Impact × Confidence × Ease) analysis
- Technical debt impact assessment
- Business value alignment

### 🤖 Autonomous Execution
- Safety-first execution with rollback
- Comprehensive testing validation
- Automatic PR creation and management
- Continuous learning and adaptation

### 📊 Value Metrics
- Real-time progress tracking
- Business impact quantification
- ROI measurement and reporting
- Continuous model improvement

## Usage

See `.terragon/README.md` for detailed usage instructions and configuration options.

## Integration

The system integrates seamlessly with existing development workflows:
- Pre-commit hooks for quality gates
- GitHub Actions for continuous automation
- Monitoring and alerting integration
- Development tool compatibility

## Safety & Controls

Multiple safety mechanisms ensure reliable autonomous operation:
- Pre-execution validation and dependency checking
- Real-time monitoring with automatic rollback triggers
- Comprehensive test suite validation
- Code quality and security maintenance

For more information, see the Terragon documentation in `.terragon/README.md`.
EOF
	@echo "✅ Documentation generated at docs/terragon/autonomous-sdlc.md"

## Help target for Terragon operations
terragon-help: ## Show all Terragon autonomous SDLC operations
	@echo "🤖 Terragon Autonomous SDLC Operations"
	@echo "====================================="
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep terragon | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-25s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "🚀 Quick Start Workflow:"
	@echo "   1. make terragon-install    # Install dependencies"
	@echo "   2. make terragon-discover   # Discover opportunities"  
	@echo "   3. make terragon-execute    # Execute improvements"
	@echo "   4. make terragon-status     # Check progress"
	@echo ""
	@echo "🔄 Continuous Operation:"
	@echo "   make terragon-schedule-continuous  # Full autonomous mode"
	@echo ""
	@echo "📚 More Information:"
	@echo "   cat .terragon/README.md    # Complete documentation"