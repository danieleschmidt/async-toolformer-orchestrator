name: Production Deployment Pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Quality Checks
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install
    
    - name: Run linting
      run: |
        poetry run ruff check src/ --output-format=github
        poetry run mypy src/
    
    - name: Run tests with coverage
      run: |
        poetry run pytest tests/ --cov=src --cov-report=xml --cov-fail-under=85
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  # Build and Push Container Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deployment/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        provenance: true
        sbom: true

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_orchestrator
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install
    
    - name: Run integration tests
      run: |
        poetry run pytest tests/integration/ -v --tb=short
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_orchestrator
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: test

  # Security Compliance Check
  compliance-check:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    steps:
    - uses: actions/checkout@v4
    
    - name: GDPR Compliance Check
      run: |
        echo "Checking GDPR compliance..."
        # Add specific GDPR compliance checks here
        grep -r "personal_data" deployment/compliance/ || echo "No personal data processing found"
    
    - name: Security Policy Validation
      run: |
        echo "Validating security policies..."
        # Add security policy validation
        test -f deployment/compliance/gdpr-compliance.md
        test -f deployment/kubernetes/production.yaml

  # Staging Deployment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-tests, compliance-check]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-east-1 --name async-toolformer-staging
    
    - name: Deploy to staging
      run: |
        # Update image tag in deployment
        sed -i "s|image: terragon/async-toolformer:latest|image: ${{ needs.build-and-push.outputs.image-tag }}|g" deployment/kubernetes/staging.yaml
        kubectl apply -f deployment/kubernetes/staging.yaml
        kubectl rollout status deployment/orchestrator-staging -n async-toolformer-staging --timeout=300s
    
    - name: Run smoke tests
      run: |
        # Wait for deployment to be ready
        sleep 30
        # Run basic health checks
        kubectl exec -n async-toolformer-staging deployment/orchestrator-staging -- curl -f http://localhost:8000/health

  # Production Deployment (Manual Approval Required)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Update kubeconfig for production regions
      run: |
        aws eks update-kubeconfig --region us-east-1 --name async-toolformer-prod-us
        aws eks update-kubeconfig --region eu-central-1 --name async-toolformer-prod-eu
        aws eks update-kubeconfig --region ap-northeast-1 --name async-toolformer-prod-ap
    
    - name: Deploy to US East (Primary)
      run: |
        # Update image tag in deployment
        sed -i "s|image: terragon/async-toolformer:latest|image: ${{ needs.build-and-push.outputs.image-tag }}|g" deployment/kubernetes/production.yaml
        kubectl apply -f deployment/kubernetes/production.yaml --context=async-toolformer-prod-us
        kubectl rollout status deployment/orchestrator-us-east -n async-toolformer --timeout=600s --context=async-toolformer-prod-us
    
    - name: Deploy to EU Central (Secondary)
      run: |
        kubectl apply -f deployment/kubernetes/production.yaml --context=async-toolformer-prod-eu
        kubectl rollout status deployment/orchestrator-eu-central -n async-toolformer --timeout=600s --context=async-toolformer-prod-eu
    
    - name: Deploy to AP Northeast (Secondary)
      run: |
        kubectl apply -f deployment/kubernetes/production.yaml --context=async-toolformer-prod-ap
        kubectl rollout status deployment/orchestrator-ap-northeast -n async-toolformer --timeout=600s --context=async-toolformer-prod-ap
    
    - name: Verify production deployment
      run: |
        # Health checks for all regions
        echo "Checking US East health..."
        kubectl exec -n async-toolformer deployment/orchestrator-us-east --context=async-toolformer-prod-us -- curl -f http://localhost:8000/health
        
        echo "Checking EU Central health..."
        kubectl exec -n async-toolformer deployment/orchestrator-eu-central --context=async-toolformer-prod-eu -- curl -f http://localhost:8000/health
        
        echo "Checking AP Northeast health..."
        kubectl exec -n async-toolformer deployment/orchestrator-ap-northeast --context=async-toolformer-prod-ap -- curl -f http://localhost:8000/health
    
    - name: Update DNS and load balancer
      run: |
        # Update Route53 records for global load balancing
        echo "Updating global DNS configuration..."
        # Add AWS CLI commands to update Route53 records

  # Post-deployment monitoring
  post-deployment-monitoring:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Setup monitoring alerts
      run: |
        echo "Setting up post-deployment monitoring..."
        # Configure alerts for new deployment
        
    - name: Performance baseline test
      run: |
        echo "Running performance baseline tests..."
        # Add performance testing commands
        
    - name: Security scan of deployed services
      run: |
        echo "Running security scan of deployed services..."
        # Add runtime security scanning

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow