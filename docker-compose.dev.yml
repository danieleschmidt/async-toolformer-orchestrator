version: '3.8'

# Development override for docker-compose.yml
# Usage: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

services:
  # Development version of main app
  async-toolformer:
    build:
      context: .
      target: development
    image: async-toolformer-orchestrator:dev
    container_name: async-toolformer-dev
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - PYTHONPATH=/app
    volumes:
      # Mount source code for live development
      - ./src:/app/src:rw
      - ./tests:/app/tests:rw
      - ./docs:/app/docs:rw
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
      # Mount configuration files
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ./Makefile:/app/Makefile:ro
    ports:
      - "8000:8000"
      - "8001:8001"  # Additional debug port
    command: >
      sh -c "
        echo 'Starting development environment...' &&
        pip install -e '.[dev]' &&
        echo 'Dependencies installed. Container ready for development.' &&
        tail -f /dev/null
      "
    stdin_open: true
    tty: true

  # Development Redis with persistent data
  redis:
    volumes:
      - ./data/redis:/data:rw
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --save 60 1000

  # Jupyter for interactive development
  jupyter:
    build:
      context: .
      target: development
    image: async-toolformer-orchestrator:dev
    container_name: async-toolformer-jupyter
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - REDIS_URL=redis://redis:6379
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./src:/app/src:rw
      - ./notebooks:/app/notebooks:rw
      - ./data:/app/data:rw
    ports:
      - "8888:8888"
    networks:
      - app-network
    command: >
      sh -c "
        pip install jupyter jupyterlab &&
        jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token='' --NotebookApp.password=''
      "
    depends_on:
      - redis

  # Test runner service
  test-runner:
    build:
      context: .
      target: development
    image: async-toolformer-orchestrator:dev
    container_name: async-toolformer-tests
    environment:
      - ENVIRONMENT=testing
      - LOG_LEVEL=DEBUG
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ./src:/app/src:rw
      - ./tests:/app/tests:rw
      - ./coverage_reports:/app/coverage_reports:rw
    networks:
      - app-network
    command: >
      sh -c "
        echo 'Installing test dependencies...' &&
        pip install -e '.[dev]' &&
        echo 'Running test suite...' &&
        pytest tests/ -v --cov=async_toolformer --cov-report=html:/app/coverage_reports/html --cov-report=xml:/app/coverage_reports/coverage.xml
      "
    depends_on:
      - redis
    profiles:
      - test

  # Code quality service
  quality-check:
    build:
      context: .
      target: development
    image: async-toolformer-orchestrator:dev
    container_name: async-toolformer-quality
    volumes:
      - ./src:/app/src:rw
      - ./tests:/app/tests:rw
      - .:/app:rw
    command: >
      sh -c "
        echo 'Running code quality checks...' &&
        pip install -e '.[dev]' &&
        echo 'Running linting...' &&
        ruff check . &&
        echo 'Running formatting check...' &&
        ruff format --check . &&
        echo 'Running type checking...' &&
        mypy src/ &&
        echo 'Running security scan...' &&
        bandit -r src/ -f json &&
        echo 'All quality checks passed!'
      "
    profiles:
      - quality

# Development-specific volumes
volumes:
  # Persistent volumes for development data
  dev-redis-data:
    driver: local
  dev-prometheus-data:
    driver: local
  dev-grafana-data:
    driver: local